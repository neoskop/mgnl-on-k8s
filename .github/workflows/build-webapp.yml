name: Build Magnolia webapp images

on:
  push:
    branches:
      - master
  schedule:
    - cron: "0 4 * * *"
  workflow_dispatch:

env:
  NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
  NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
  MIN_VERSION: 6.3.15
  DOCKER_ORG: neoskop
  IMAGE_PREFIX: mgnl-webapp

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.set-versions.outputs.versions }}
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet curl

      - id: set-versions
        shell: bash
        run: |
          set -e

          get_versions() {
            local url="https://nexus.magnolia-cms.com/repository/public/info/magnolia/magnolia-empty-webapp/maven-metadata.xml"
            local versions=$(curl -s "$url" \
              | xmlstarlet sel -t -v '//metadata/versioning/versions/version/text()' -)

            echo "$versions"
          }

          filter_versions() {
            local min_version="$1"
            local versions="$2"

            local filtered_versions=$(echo "$versions" \
              | grep -viE "alpha|beta|snapshot" \
              | awk -v min_version="$min_version" 'BEGIN { split(min_version, min_version_arr, "."); } { split($0, version_arr, "."); if (version_arr[1] >= min_version_arr[1] && version_arr[2] >= min_version_arr[2] && version_arr[3] >= min_version_arr[3]) print $0; }' \
              | sort -V -r)

            echo "$filtered_versions"
          }

          format_versions() {
            local versions="$1"
            # Turn into JSON array format
            local formatted_versions="["$(echo "$versions" | awk '{printf "\"%s\"\n", $0}' | awk '{printf "%s%s", sep ? sep : "", $0; sep=","}')"]"
            echo "$formatted_versions"
          }

          versions=$(get_versions)
          filtered_versions=$(filter_versions "$MIN_VERSION" "$versions")
          formatted_versions=$(format_versions "$filtered_versions")
          echo "versions=$formatted_versions" >> $GITHUB_OUTPUT

  build-and-push:
    needs: get-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJSON(needs.get-versions.outputs.versions) }}
        flavor: [dx-damfs, ce-damfs, dx, ce]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure Maven settings for Magnolia Nexus
        shell: bash
        run: |
          mkdir -p /root/.m2
          cat > /root/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>magnolia.enterprise</id>
                <username>${NEXUS_USERNAME}</username>
                <password>${NEXUS_PASSWORD}</password>
              </server>
              <server>
                <id>magnolia.enterprise.releases</id>
                <username>${NEXUS_USERNAME}</username>
                <password>${NEXUS_PASSWORD}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Check if image already exists
        id: check-image
        if: ${{ github.event_name == 'schedule' }}
        run: |
          tag="docker.io/${DOCKER_ORG}/${IMAGE_PREFIX}-${{ matrix.flavor }}:${{ matrix.version }}"
          if docker manifest inspect "$tag" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Image already exists: $tag"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Image missing: $tag will be built."
          fi

      - name: Install build dependencies
        if: steps.check-image.outputs.exists == 'false'
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet curl maven

      - name: Cache Maven repository
        if: steps.check-image.outputs.exists == 'false'
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ matrix.flavor }}

      - name: Build WAR and Docker image
        if: steps.check-image.outputs.exists == 'false'
        run: |
          set -e
          repo_root="${GITHUB_WORKSPACE}"
          edition=$(echo "${{ matrix.flavor }}" | cut -c 1-2)
          build_dir=$(mktemp -d)
          cd "$build_dir"

          echo "Building WAR for $edition ${{ matrix.version }}..."

          # --- Build WAR ---
          cp $repo_root/images/webapp/magnolia-build/$edition/pom.parent.xml pom.xml
          mkdir -p ./webapp/src/main/webapp
          cp $repo_root/images/webapp/magnolia-build/$edition/pom.webapp.xml webapp/pom.xml
          cp -r $repo_root/images/webapp/magnolia-build/WEB-INF ./webapp/src/main/webapp/WEB-INF

          if [[ $edition == ce ]]; then
            xmlstarlet ed -L -N p="http://maven.apache.org/POM/4.0.0" \
              -d "//p:dependency[p:artifactId='magnolia-site-app']" webapp/pom.xml
          else
            sed -i s/MagnoliaWidgetSet/MagnoliaProWidgetSet/ ./webapp/src/main/webapp/WEB-INF/config/default/magnolia.properties
          fi

          if [[ "${{ matrix.flavor }}" == *-damfs ]]; then
            find ./webapp/src/main/webapp/WEB-INF -name magnolia.properties \
              -exec sed -i 's|author.xml|author-damfs.xml|g; s|public.xml|public-damfs.xml|g' {} \;
          fi

          mvn -DmagnoliaBundleVersion=${{ matrix.version }} -T 8 package

          mkdir -p $repo_root/images/webapp/magnolia-build/${{ matrix.flavor }}
          mv ./webapp/target/webapp.war $repo_root/images/webapp/magnolia-build/${{ matrix.flavor }}/webapp-${{ matrix.version }}.war

          # --- Build and Push Docker Image ---
          echo "Building Docker image for ${{ matrix.flavor }}:${{ matrix.version }}"
          docker buildx build \
            --cache-to=type=gha,mode=max \
            --cache-from=type=gha \
            --platform linux/amd64,linux/arm64 \
            --build-arg VERSION=${{ matrix.version }} \
            --push \
            -t docker.io/${DOCKER_ORG}/${IMAGE_PREFIX}-${{ matrix.flavor }}:${{ matrix.version }} \
            -f $repo_root/images/webapp/magnolia-build/${{ matrix.flavor }}/Dockerfile \
            $repo_root/images/webapp/magnolia-build

      - name: Skip log
        if: steps.check-image.outputs.exists == 'true'
        run: echo "âœ… Image already exists, skipping build for ${{ matrix.flavor }}:${{ matrix.version }}."


  notify-failure:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Notify Slack on failure
        uses: slackapi/slack-github-action@v1.27.1
        with:
          channel-id: U0Q3KU9EC
          slack-message: |
            *[mgnl-on-k8s]:* Bauen der Webapp-Images ist fehlgeschlagen
            *Pipeline:* ${{ github.workflow }}
            *Run:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

